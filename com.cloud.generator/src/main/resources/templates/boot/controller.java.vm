package ${package.Controller};

import com.zksk.common.annotation.RepeatSubmit;
import com.zksk.common.enums.BusinessType;
import com.zksk.common.annotation.Log;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.*;
import org.springframework.validation.annotation.Validated;
import com.zksk.common.interceptor.domain.R;
import com.zksk.common.interceptor.domain.PageQuery;
import cn.dev33.satoken.annotation.SaCheckPermission;
import ${package.Entity}.${entity};
import ${package.Entity}.vo.${entity}Vo;
import ${package.Entity}.dto.${entity}Dto;
import ${package.Service}.${table.serviceName};
#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;

import javax.validation.constraints.NotNull;
import java.util.List;

/**
 * $!{table.comment}
 *
 * @author ${author}
 * @since ${date}
 */
@Slf4j
@Validated
@RequiredArgsConstructor
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${cfg.modelName})/${cfg.modelName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    private final ${table.serviceName} ${table.entityPath}Service;

    /**
     * 查询$!{table.comment}列表-分页
     */
    //@SaCheckPermission("")
    @GetMapping("/listPage")
    public R<Page<${entity}Vo>> listPage(${entity}Dto dto, PageQuery pageQuery)
    {
        Page<${entity}Vo> resultPage = ${table.entityPath}Service.queryPageList(dto,pageQuery);
       return R.ok(resultPage);
    }

    /**
     * 查询$!{table.comment}列表-不分页
     */
    //@SaCheckPermission("")
    @GetMapping("/list")
    public R<List<${entity}Vo>> list(${entity}Dto dto) {
        List<${entity}Vo> list = ${table.entityPath}Service.queryList(dto);
        return R.ok(list);
    }

    /**
     * 新增$!{table.comment}
     */
    //@SaCheckPermission("")
    @Log(title = "$!{table.comment}", businessType = BusinessType.INSERT)
    @RepeatSubmit()
    @PostMapping
    public R<Void> add(@RequestBody ${entity}Dto dto)
    {
        return toAjax(${table.entityPath}Service.insert${entity}(dto));
    }

    /**
     * 修改$!{table.comment}
     */
    //@SaCheckPermission("")
    @Log(title = "$!{table.comment}", businessType = BusinessType.UPDATE)
    @RepeatSubmit()
    @PutMapping
    public R<Void> edit(@RequestBody ${entity}Dto dto)
    {
        return toAjax(${table.entityPath}Service.update${entity}(dto));
    }

 ##开始循环判定当前数据表是否存在主键id，存在则生成根据id查询与删除的基本方法
 #foreach($field in ${table.fields})
     #if(${field.keyFlag})
    /**
    * 获取$!{table.comment}详细信息
    */
    //@SaCheckPermission("")
    @GetMapping(value = "/{${field.propertyName}}")
    public R<${entity}Vo> getInfo(@NotNull(message = "ID不能为空") @PathVariable("${field.propertyName}") ${field.propertyType} ${field.propertyName})   {
        return R.ok(${table.entityPath}Service.select${entity}ById(${field.propertyName}));
    }

    /**
    * 删除$!{table.comment}
    */
    //@SaCheckPermission("")
    @Log(title = "$!{table.comment}", businessType = BusinessType.DELETE)
    @DeleteMapping("/{${field.propertyName}s}")
    public R<Void> remove(@PathVariable ${field.propertyType}[] ${field.propertyName}s)  {
        return toAjax(${table.entityPath}Service.delete${entity}ByIds(${field.propertyName}s));
    }
    #end
 #end

    /**
     * 状态修改
     */
    //@SaCheckPermission("")
    @Log(title = "$!{table.comment}", businessType = BusinessType.UPDATE)
    @PutMapping("/changeStatus")
    public R<Void> changeStatus(@RequestBody ${entity}Dto dto) {
        return toAjax(${table.entityPath}Service.update${entity}(dto));
    }

}
#end
